#!/usr/bin/env bash

find_me() {
    # Find where we are installed through possible system links
    local SOURCE="${BASH_SOURCE[0]}"
    # resolve $SOURCE until the file is no longer a symlink
    while [ -h "${SOURCE}" ]; do
        PATH_BASE="$(cd -P "$(dirname "${SOURCE}")" && pwd)"
        SOURCE="$(readlink "${SOURCE}")"
        # if SOURCE was a relative symlink, we need to resolve it
        # relative to the path where the symlink file was located
        [[ ${SOURCE} != /* ]] && SOURCE="${PATH_BASE}/${SOURCE}"
    done
    PATH_BASE="$(cd -P "$(dirname "${SOURCE}")" && pwd)"
}
find_me

heading() {
    local MESSAGE="${1}"
    tput setaf 2
    echo -en "${MESSAGE}"
    tput sgr0
    echo
}

install_dotfile() {
    local SUDO_CMD="sudo"

    echo

    local UNAME
    UNAME="$(uname)"
    MSYS=0
    if [[ "${UNAME}" =~ ^(MINGW|MSYS).*$ ]]; then
        MSYS=1
        SUDO_CMD=""
    fi

    if [ "${EUID}" -eq 0 ]; then
        echo "Do not install as root; user home dir is needed"
        return 1
    fi

    if [ ! -d /usr/local/bin ]; then
        mkdir -p /usr/local/bin
    fi

    ensure_link "${SUDO_CMD}" "${PATH_BASE}/dotfile" /usr/local/bin/dotfile || return 1
    echo

    # run to make sure config file is created for current user
    dotfile > /dev/null || return 1

    heading "::Current config ~/.config/dotfile/config.ini"
    tput setaf 3
    cat ~/.config/dotfile/config.ini
    tput sgr0
    echo

    heading "::Dev Install completed"
    dotfile --version
    echo
    exit 0
}

ensure_link() {
    local SUDO_CMD="${1}"
    local SRC="${2%/}"
    local DEST="${3%/}"
    local NAME="${3##*/}"
    local NEED_LINK=0
    local LINK
    local WIN_SRC
    local WIN_DEST

    echo "Checking executable: ${NAME}"
    LINK="$(readlink "${DEST}")"

    if [ ! -z "${LINK}" ] && [ ! "${LINK}" = "${SRC}" ]; then
        NEED_LINK=1
        echo "Existing link points elsewhere, removing"
        ${SUDO_CMD} rm "${DEST}"
        if [ ! "${?}" -eq 0 ]; then
            echo "Unable to remove bad link"
            return 1
        fi
    fi
    if [ ! -f "${DEST}" ]; then
        NEED_LINK=1
    fi
    if [ "${NEED_LINK}" -eq 1 ]; then
        echo "Creating system link"
        if [ "${MSYS}" -eq 1 ]; then
            WIN_SRC="$(cygpath -w "${SRC}")"
            WIN_DEST="$(cygpath -w "${DEST}")"
            local CMD_C="mklink ${WIN_DEST} ${WIN_SRC}"
            cmd //C "${CMD_C}" > /dev/null
        else
            ${SUDO_CMD} ln -s "${SRC}" "${DEST}"
        fi

        if [ ! "${?}" -eq 0 ]; then
            echo "Unable to create system link"
            return 1
        fi
    fi

    local MESSAGE="${DEST} -> ${SRC}"
    if [ -L "${DEST}" ] && [ "$(readlink "${DEST}")" = "${SRC}" ]; then
        echo "Link confirmed ${MESSAGE}"
        return 0
    else
        echo "Unable to install link ${MESSAGE}"
        return 1
    fi
}

install_dotfile
