#!/usr/bin/env bash

heading() {
    local MESSAGE="${1}"
    tput setaf 2
    echo -en "${MESSAGE}"
    tput sgr0
    echo ""
}

install_dotfile() {
    local SUDO_CMD="sudo"

    echo

    local UNAME="$(uname)"
    LINUX=0
    WINDOWS=0
    OSX=0
    if [ "${UNAME}" = "Linux" ]; then
        LINUX=1
    elif [ "${UNAME}" = "Darwin" ]; then
        OSX=1
    elif [[ "${UNAME}" =~ ^MINGW.*$ ]]; then
        WINDOWS=1
        SUDO_CMD=""
        if [ -d "/opt" ]; then
            mkdir "/opt"
        fi
    fi

    if [ "${EUID}" -eq 0 ]; then
        echo "Do not install as root; user home dir is needed"
        return 1
    fi

    PATH_INSTALL=""
    if [ -d "/usr/local/opt" ]; then
        PATH_INSTALL="/usr/local/opt"
    elif [ -d "/opt" ]; then
        PATH_INSTALL="/opt"
    else
        echo "No reasonable install dir available"
        return 1
    fi

    PATH_BIN=""
    if [ -d "/usr/local/bin" ]; then
        PATH_BIN="/usr/local/bin"
    elif [ -d "/usr/bin" ]; then
        PATH_BIN="/usr/bin"
    else
        echo "No reasonable bin dir available"
        return 1
    fi

    if [ ! -d /tmp ]; then
        echo "Missing temp dir"
        return 1
    fi

    if [ -d /tmp/dotfile ]; then
        rm -rf /tmp/dotfile
        if [ ! "${?}" -eq 0 ]; then
            echo "Unable to clear temp"
            return 1
        fi
    fi

    heading "::Downloading"
    git clone --depth=1 --branch=master https://github.com/lachlankrautz/dotfile /tmp/dotfile
    if [ ! "${?}" -eq 0 ]; then
        echo "Unable to clone project"
        return 1
    fi

    rm -rf /tmp/dotfile/.git /tmp/dotfile/.gitignore
    if [ ! "${?}" -eq 0 ]; then
        echo "Unable to clean up git files"
        return 1
    fi

    chmod 755 /tmp/dotfile/bin/dotfile /tmp/dotfile/bin/install
    if [ ! "${?}" -eq 0 ]; then
        echo "Unable to set executable permissions"
        return 1
    fi

    if [ -d "${PATH_INSTALL}/dotfile" ]; then
        echo "Removing old version"
        ${SUDO_CMD} rm -rf "${PATH_INSTALL}/dotfile"
        if [ ! "${?}" -eq 0 ]; then
            echo "Unable to remove old version"
            return 1
        fi
    fi

    echo "Moving to ${PATH_INSTALL}/dotfile"
    ${SUDO_CMD} mv /tmp/dotfile "${PATH_INSTALL}"
    if [ ! "${?}" -eq 0 ]; then
        echo "Unable to move project to ${PATH_INSTALL}"
        return 1
    fi

    ensure_link "${SUDO_CMD}" "${PATH_INSTALL}/dotfile/bin/dotfile" "${PATH_BIN}/dotfile" || return 1
    ensure_link "${SUDO_CMD}" "${PATH_INSTALL}/dotfile/bin/install" "${PATH_BIN}/dotfile-update" || return 1
    echo

    # run to make sure config file is created for current user
    dotfile > /dev/null || return 1

    heading "::Current config ~/.config/dotfile/config.ini"
    tput setaf 3
    cat ~/.config/dotfile/config.ini
    tput sgr0
    echo

    heading "::Install completed"
    dotfile --version
    echo
    exit 0
}

ensure_link() {
    local SUDO_CMD="${1}"
    local SRC="${2%/}"
    local DEST="${3%/}"
    local NAME="${3##*/}"

    echo "Checking executable: ${NAME}"
    local NEED_LINK=0
    local LINK="$(readlink "${DEST}")"
    if [ ! -z "${LINK}" ] && [ ! "${LINK}" = "${SRC}" ]; then
        NEED_LINK=1
        echo "Existing link points elsewhere, removing"
        ${SUDO_CMD} rm "${DEST}"
        if [ ! "${?}" -eq 0 ]; then
            echo "Unable to remove bad link"
            return 1
        fi
    fi
    if [ ! -f "${DEST}" ]; then
        NEED_LINK=1
    fi
    if [ "${NEED_LINK}" -eq 1 ]; then

        echo "Creating system link"
        if [ "${WINDOWS}" -eq 1 ]; then
            local WIN_SRC="$(cygpath -w "${SRC}")"
            local WIN_DEST="$(cygpath -w "${DEST}")"
            local CMD_C="mklink ${WIN_DEST} ${WIN_SRC}"
            cmd /C "\"${CMD_C}\"" > /dev/null 2>&1
        else
            ${SUDO_CMD} ln -s "${SRC}" "${DEST}"
        fi

        if [ ! "${?}" -eq 0 ]; then
            echo "Unable to create system link"
            return 1
        fi
    fi

    local MESSAGE="${DEST} -> ${SRC}"
    if [ -L "${DEST}" ] && [ "$(readlink "${DEST}")" = "${SRC}" ]; then
        echo "Link confirmed ${MESSAGE}"
        return 0
    else
        echo "Unable to install link ${MESSAGE}"
        return 1
    fi
}

install_dotfile
